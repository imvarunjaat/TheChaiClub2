'use client';

import Image from 'next/image';
import React, { ReactNode, useEffect, useState } from 'react';
import AuthModal from './components/AuthModal';
import RoomsScreen from './components/RoomsScreen';
import ChatsScreen from './components/ChatsScreen';
import ParticlesBackground from './components/ParticlesBackground';
import ChatRoomPage from './components/ChatRoomPage';
import CollegeRoomPage from './components/CollegeRoomPage';
import ProfilePage from './components/ProfilePage';
import { useAuth } from './context/AuthContext';
import { useChatRooms } from './hooks/useChatRooms';

interface ChatRoomCardProps {
  title: string;
  description: string;
  onlineCount: number;
  icon: ReactNode;
  gradient: string;
  textColor: string;
  buttonColor: string;
  onJoinRoom: (roomId: string, roomName: string) => void;
}

// Component for Chat Room Cards
function ChatRoomCard({ title, description, onlineCount, icon, gradient, textColor, buttonColor, onJoinRoom }: ChatRoomCardProps) {
  // Ensure onlineCount is a number
  const safeOnlineCount = typeof onlineCount === 'number' ? onlineCount : 0;
  
  return (
    <div className={`flex flex-col bg-gradient-to-br ${gradient || 'from-[#fbeee0] to-[#f9c7c7]'} rounded-2xl sm:rounded-3xl shadow-lg p-3 sm:p-5 md:p-7 border border-[#faede4] group mobile-card mobile-fade-in w-full h-full room-card-hover`}>
      <div className="absolute top-0 right-0 w-24 h-24 rounded-full opacity-5 -mr-6 -mt-6 bg-current floating-animation"></div>
      <div className="flex items-center gap-1.5 sm:gap-4 mb-2 sm:mb-4">
        <span className={`${buttonColor || 'bg-[#f9c7c7]'} text-[#593A27] rounded-full p-1.5 sm:p-3 shadow-md card-icon`}>
          {/* Check if icon is a string (SVG) or ReactNode */}
          {typeof icon === 'string' ? (
            <div dangerouslySetInnerHTML={{ __html: icon }} className="w-5 h-5" />
          ) : icon ? (
            icon
          ) : (
            <svg viewBox="0 0 24 24" width="20" height="20" stroke="currentColor" strokeWidth="2" fill="none" strokeLinecap="round" strokeLinejoin="round">
              <path d="M18 8h1a4 4 0 010 8h-1"></path>
              <path d="M2 8h16v9a4 4 0 01-4 4H6a4 4 0 01-4-4V8z"></path>
              <line x1="6" y1="1" x2="6" y2="4"></line>
              <line x1="10" y1="1" x2="10" y2="4"></line>
              <line x1="14" y1="1" x2="14" y2="4"></line>
            </svg>
          )}
        </span>
        <div>
          <h3 className={`text-sm sm:text-lg font-semibold ${textColor || 'text-[#593A27]'} truncate max-w-[150px] sm:max-w-full card-title`}>{title}</h3>
          <span className="text-xs text-[#b89e8f] flex items-center gap-1">
            <span className="w-2 h-2 rounded-full bg-green-400 mobile-pulse"></span>
            {safeOnlineCount} online
          </span>
        </div>
      </div>
      <p className="text-[#593A27] text-xs sm:text-sm mb-3 sm:mb-6 flex-grow leading-relaxed line-clamp-3 sm:line-clamp-none font-medium bg-white/30 p-2 rounded-lg shadow-sm">{description}</p>
      <div className="flex items-center justify-between">
        <div className="flex -space-x-2 card-users">
          <Image 
            src="https://randomuser.me/api/portraits/men/12.jpg"
            alt="User"
            width={24}
            height={24}
            className="rounded-full border-2 border-white"
          />
          <Image 
            src="https://randomuser.me/api/portraits/women/22.jpg"
            alt="User"
            width={24}
            height={24}
            className="rounded-full border-2 border-white"
          />
          <div className="w-5 h-5 sm:w-6 sm:h-6 rounded-full bg-[#f9c7c7] border-2 border-white flex items-center justify-center">
            <span className="text-xs text-[#593A27] font-medium">+{Math.max(0, safeOnlineCount - 2)}</span>
          </div>
        </div>
        <button 
          onClick={() => onJoinRoom(typeof title === 'string' ? title.toLowerCase().replace(/\s+/g, '-') : 'chat', title)}
          className={`${buttonColor || 'bg-[#f9c7c7]'} text-[#593A27] px-2 sm:px-4 md:px-5 py-1 sm:py-2 rounded-full text-xs sm:text-sm font-bold shadow-sm whitespace-nowrap mobile-btn card-button`}
        >
          Join Room
        </button>
      </div>
    </div>
  );
}

interface ActiveUserProps {
  image: string;
  college: string;
  borderColor: string;
  bgColor: string;
}

// Component for Active Users
function ActiveUser({ image, college, borderColor, bgColor }: ActiveUserProps) {
  return (
    <div className="relative group">
      <Image 
        src={image}
        alt={college}
        width={32}
        height={32}
        className={`rounded-full border-2 ${borderColor} shadow transition transform hover:scale-110`}
      />
      <span className={`absolute left-1/2 transform -translate-x-1/2 top-10 opacity-0 group-hover:opacity-100 transition bg-white px-2 py-1 rounded-xl text-xs font-semibold ${bgColor} text-[#a07764] shadow-lg z-10 whitespace-nowrap`}>
        {college}
      </span>
    </div>
  );
}

interface ChaiCupProps {
  opacity: string | number;
}

// Component for Chai Cup
function ChaiCup({ opacity }: ChaiCupProps) {
  return (
    <div className={`chai-cup opacity-${opacity}`}>
      <div className="chai-steam"></div>
      <svg viewBox="0 0 32 24" fill="none" className="absolute bottom-0 left-0 w-full h-4"></svg>
    </div>
  );
}

export default function Home() {
  const [isAuthModalOpen, setAuthModalOpen] = useState(false);
  const [showProfilePage, setShowProfilePage] = useState(false);
  const [activeView, setActiveView] = useState<'home' | 'rooms' | 'chats' | 'chatroom' | 'college'>('home');
  const [activeChatRoom, setActiveChatRoom] = useState<{id: string, name: string} | null>(null);
  
  // Get authentication state
  const { user, isNewUser, setIsNewUser, refreshProfile } = useAuth();
  
  // Get chat rooms data
  const { chatRooms, loading: loadingRooms } = useChatRooms();
  
  // Function to handle navigation changes
  const handleNavigation = (view: 'home' | 'rooms' | 'chats' | 'college') => {
    setActiveView(view);
  };
  
  // State to track room transition animation
  const [isRoomTransitioning, setIsRoomTransitioning] = useState(false);
  const [selectedRoomId, setSelectedRoomId] = useState<string | null>(null);

  // Function to handle joining a chat room with animation
  const handleJoinRoom = (roomId: string, roomName: string, event?: React.MouseEvent) => {
    console.log('Joining room:', { roomId, roomName, chatRooms });
    
    // Check if user is authenticated
    if (!user) {
      console.log('User not authenticated, showing auth modal');
      setIsRoomTransitioning(false);
      setSelectedRoomId(null);
      setAuthModalOpen(true);
      return;
    }
    
    // Start transition animation
    setIsRoomTransitioning(true);
    setSelectedRoomId(roomId);
    
    // Find the room in our chat rooms data
    const room = chatRooms.find(r => 
      roomId === r.id || 
      roomId === r.name?.toLowerCase().replace(/\s+/g, '-')
    );
    
    // Set a timeout to navigate after animation completes
    setTimeout(() => {
      if (room) {
        console.log('Room found, navigating to chat room:', room);
        setActiveChatRoom(room);
        setActiveView('chatroom');
      } else {
        console.error(`Chat room with id ${roomId} not found`, { availableRooms: chatRooms });
        // If we can't find the room, we'll create a temporary one from the provided parameters
        const tempRoom = {
          id: roomId,
          name: roomName,
          description: 'Chat room description',
          icon: '',
          gradient: 'from-[#fbeee0] to-[#f9c7c7]',
          text_color: 'text-[#593A27]',
          button_color: 'bg-[#f9c7c7]',
        };
        setActiveChatRoom(tempRoom);
        setActiveView('chatroom');
      }
      
      // Reset transition states after navigation
      setIsRoomTransitioning(false);
      setSelectedRoomId(null);
    }, 800); // Reduced from 2500ms (2.5s) to 800ms for faster room transition
  };
  
  // Function to handle going back from a chat room
  const handleBackFromChatRoom = () => {
    setActiveView('home');
    setActiveChatRoom(null);
  };
  
  // Function to handle profile completion
  const handleProfileComplete = async () => {
    setShowProfilePage(false);
    setIsNewUser(false);
    await refreshProfile();
  };
  
  // Check if we need to show the profile page
  useEffect(() => {
    if (isNewUser && user) {
      setShowProfilePage(true);
    }
  }, [isNewUser, user]);
  
  useEffect(() => {
    // Update viewport meta tag for better mobile responsiveness
    const meta = document.createElement('meta');
    meta.name = 'viewport';
    meta.content = 'width=device-width, initial-scale=1, maximum-scale=5, viewport-fit=cover';
    document.head.appendChild(meta);
    
    return () => {
      document.head.removeChild(meta);
    }
  }, []);

  return (
    <div className="app-container">
      <ParticlesBackground />
      {showProfilePage && user ? (
        <div className="min-h-screen flex items-center justify-center p-4 bg-[#fbeee0]/30">
          <ProfilePage onComplete={handleProfileComplete} isNewUser={true} />
        </div>
      ) : (
        <div className="relative z-0">
          <div className="flex flex-col sm:flex-row min-h-screen max-w-[100vw] overflow-x-hidden">
            {/* Sidebar */}
            <aside className="w-full sm:w-16 md:w-20 bg-white/70 backdrop-blur-lg flex sm:flex-col items-center justify-between sm:justify-start sm:rounded-r-3xl py-2 sm:py-8 shadow-xl border-b sm:border-b-0 sm:border-r border-[#fbeee0] z-10 sticky top-0 sm:relative mobile-glass">
              <div className="sm:mb-12">
                {/* Logo removed */}
              </div>
              <nav className="flex sm:flex-col space-x-4 sm:space-x-0 sm:space-y-8 items-center smooth-scroll">
                <button 
                  title="Home" 
                  onClick={() => handleNavigation('home')}
                  className={`focus:outline-none hover:scale-110 transition mobile-nav-item touch-target flex flex-col items-center ${activeView === 'home' ? 'active' : ''}`}
                >
                  <svg className="w-7 h-7" fill="none" stroke="#593A27" strokeWidth="1.7" viewBox="0 0 24 24"><path d="M3 12L12 4l9 8"></path><path d="M9 21V12h6v9"></path></svg>
                  <span className="text-xs font-medium mt-1 text-[#593A27] sm:block hidden">Home</span>
                  <span className="text-[10px] font-medium mt-0.5 text-[#593A27] block sm:hidden">Home</span>
                </button>
                <button 
                  title="Chat Rooms" 
                  onClick={() => handleNavigation('rooms')}
                  className={`focus:outline-none hover:scale-110 transition mobile-nav-item touch-target flex flex-col items-center ${activeView === 'rooms' ? 'active' : ''}`}
                >
                  <svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-7 h-7">
                    <ellipse cx="14" cy="18" rx="7" ry="5" fill="#fbeee0" stroke="#593A27" strokeWidth="1.5"/>
                    <path d="M21 17c2 0 4 1 4 3s-2 3-4 3" stroke="#593A27" strokeWidth="1.5" fill="none" strokeLinecap="round"/>
                    <path d="M7 18c-2 0-3-2-2-3" stroke="#593A27" strokeWidth="1.5" fill="none" strokeLinecap="round"/>
                    <ellipse cx="14" cy="13" rx="4" ry="1.2" fill="#fbeee0" stroke="#593A27" strokeWidth="1.2"/>
                    <path d="M24 19c.5 1.5 2 2 2 2" stroke="#593A27" strokeWidth="1.2" fill="none" strokeLinecap="round"/>
                    <rect x="22.5" y="22" width="6" height="4" rx="2" fill="#fbeee0" stroke="#593A27" strokeWidth="1.2"/>
                    <path d="M25 26v2l2-2" stroke="#593A27" strokeWidth="1.2" strokeLinecap="round"/>
                    <rect x="16" y="25" width="5" height="3" rx="1.5" fill="#fbeee0" stroke="#593A27" strokeWidth="1.2"/>
                    <path d="M18 28v1l1.5-1" stroke="#593A27" strokeWidth="1.2" strokeLinecap="round"/>
                  </svg>
                  <span className="text-xs font-medium mt-1 text-[#593A27] sm:block hidden">Rooms</span>
                  <span className="text-[10px] font-medium mt-0.5 text-[#593A27] block sm:hidden">Rooms</span>
                </button>
                <button 
                  title="My Chats" 
                  onClick={() => handleNavigation('chats')}
                  className={`focus:outline-none hover:scale-110 transition mobile-nav-item touch-target flex flex-col items-center ${activeView === 'chats' ? 'active' : ''}`}
                >
                  <svg className="w-7 h-7" fill="none" stroke="#593A27" strokeWidth="1.7" viewBox="0 0 24 24"><path d="M21 15a2 2 0 012-2H7l-4 4V5a2 2 0 012-2h12a2 2 0 012 2v9"></path></svg>
                  <span className="text-xs font-medium mt-1 text-[#593A27] sm:block hidden">Chats</span>
                  <span className="text-[10px] font-medium mt-0.5 text-[#593A27] block sm:hidden">Chats</span>
                </button>
                <button 
                  title="Your College" 
                  onClick={() => handleNavigation('college')}
                  className={`focus:outline-none hover:scale-110 transition mobile-nav-item touch-target flex flex-col items-center ${activeView === 'college' ? 'active' : ''}`}
                >
                  <svg className="w-7 h-7" fill="none" stroke="#593A27" strokeWidth="1.7" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 14l9-5-9-5-9 5 9 5z" />
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998a12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
                  </svg>
                  <span className="text-xs font-medium mt-1 text-[#593A27] sm:block hidden">Yours</span>
                  <span className="text-[10px] font-medium mt-0.5 text-[#593A27] block sm:hidden">Yours</span>
                </button>
              </nav>
              <div className="sm:mt-auto sm:pt-10 hidden sm:block">
                <span className="text-xs text-[#b89e8f]">v1.0</span>
              </div>
            </aside>

            {/* Main Content Area with Sliding Views */}
            <div className="flex-1 flex flex-col w-full relative overflow-hidden">  
              {/* Chats Screen (Sliding Panel) */}
              <div className={`absolute top-0 left-0 right-0 bottom-0 bg-white transform transition-transform duration-300 ease-in-out z-20 ${activeView === 'chats' ? 'translate-x-0' : 'translate-x-full'}`}>
                <ChatsScreen />
              </div>
              {/* Rooms Screen (Sliding Panel) */}
              <div className={`absolute top-0 left-0 right-0 bottom-0 bg-white transform transition-transform duration-300 ease-in-out z-20 ${activeView === 'rooms' ? 'translate-x-0' : 'translate-x-full'}`}>
                <RoomsScreen onJoinRoom={handleJoinRoom} />
              </div>
              {/* College Room Screen (Sliding Panel) */}
              <div className={`fixed top-0 left-0 right-0 bottom-0 bg-white transform transition-transform duration-300 ease-in-out z-40 ${activeView === 'college' ? 'translate-x-0' : 'translate-x-full'}`}>
                <CollegeRoomPage onBack={() => handleNavigation('home')} />
              </div>
              {/* Chat Room Screen (Sliding Panel) */}
              <div className={`fixed top-0 left-0 right-0 bottom-0 bg-white transform transition-transform duration-300 ease-in-out z-40 ${activeView === 'chatroom' ? 'translate-x-0' : 'translate-x-full'}`}>
                {activeChatRoom && (
                  <ChatRoomPage 
                    roomId={activeChatRoom.id} 
                    roomName={activeChatRoom.name} 
                    onBack={handleBackFromChatRoom} 
                  />
                )}
              </div>
              {/* Top Navbar */}
              <header className="w-full flex flex-wrap justify-between items-center px-3 sm:px-6 md:px-8 py-2 sm:py-4 bg-white/70 backdrop-blur-lg shadow-sm sm:rounded-bl-3xl border-b border-[#fbeee0] sticky top-[50px] sm:top-0 z-[5] mobile-glass">
                <h1 className="text-lg sm:text-2xl md:text-3xl font-bold tracking-tight text-[#593A27] flex items-center gap-1 sm:gap-2">
                  <div className="logo-container py-2 px-4">
                    <span className="logo-text text-5xl md:text-6xl">ogadda</span>
                  </div>
                </h1>
                <div className="flex items-center gap-2 sm:gap-4">
                  <button 
                    onClick={() => setAuthModalOpen(true)}
                    className="flex items-center gap-1 sm:gap-2 cursor-pointer hover:scale-105 transition-transform group"
                    aria-label="Login or sign up"
                  >
                    <div className="relative w-9 h-9 rounded-full bg-[#fbeee0] flex items-center justify-center border-2 border-[#f9c7c7] shadow-md overflow-hidden">
                      <svg className="w-5 h-5 text-[#593A27] group-hover:text-[#f9c7c7] transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0c0 4.5-5 11-5 11z"/></svg>
                    </div>
                    <span className="text-xs font-medium text-[#593A27] hidden sm:block group-hover:text-[#f9c7c7] transition-colors">Sign In</span>
                  </button>
                </div>
              </header>

              <main className={`flex-1 w-full p-2 sm:p-4 md:p-6 lg:p-8 smooth-scroll overflow-x-hidden transition-opacity duration-300 ${activeView === 'home' ? 'opacity-100' : 'opacity-0'}`}>
                {/* Chat Rooms & Join Button */}
                <section className="w-full flex flex-col">
                  <div className="flex items-center justify-between mb-3 sm:mb-4 flex-wrap gap-2">
                    <h2 className="text-lg sm:text-xl md:text-2xl font-semibold text-[#6e4e36]">Featured Chat Rooms</h2>
                  </div>
                  {/* Transition overlay for room selection */}
                  {isRoomTransitioning && (
                    <div className="room-transition-overlay"></div>
                  )}
                  
                  {/* Responsive Room Grid */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 lg:gap-6 w-full pb-8 relative">
                    {loadingRooms ? (
                      // Loading skeleton
                      Array(6).fill(0).map((_, i) => (
                        <div key={i} className="flex flex-col bg-white/50 animate-pulse rounded-2xl sm:rounded-3xl shadow-lg p-3 sm:p-5 md:p-7 h-52">
                          <div className="flex items-center gap-4 mb-4">
                            <div className="w-12 h-12 rounded-full bg-gray-200"></div>
                            <div className="space-y-2">
                              <div className="h-4 w-24 bg-gray-200 rounded"></div>
                              <div className="h-3 w-16 bg-gray-200 rounded"></div>
                            </div>
                          </div>
                          <div className="space-y-2 flex-grow">
                            <div className="h-3 bg-gray-200 rounded w-full"></div>
                            <div className="h-3 bg-gray-200 rounded w-5/6"></div>
                            <div className="h-3 bg-gray-200 rounded w-4/6"></div>
                          </div>
                          <div className="flex justify-end mt-4">
                            <div className="h-8 w-24 bg-gray-200 rounded-full"></div>
                          </div>
                        </div>
                      ))
                    ) : (
                      // Render chat rooms from Supabase
                      chatRooms.map((room) => (
                        <div 
                          key={room.id} 
                          className={`${selectedRoomId === room.id ? 'room-selected' : ''} ${selectedRoomId && selectedRoomId !== room.id ? 'smoke-disappear' : ''}`}
                        >
                          <ChatRoomCard 
                            title={room.name}
                            description={room.description}
                            onlineCount={room.online_count || 0}
                            // Parse SVG from string to React element
                            icon={<div dangerouslySetInnerHTML={{ __html: room.icon }} />}
                            gradient={room.gradient}
                            textColor={room.text_color}
                            buttonColor={room.button_color}
                            onJoinRoom={handleJoinRoom}
                          />
                        </div>
                      ))
                    )}
                  </div>
                </section>
              </main>
            </div>
            
            {/* Auth Modal */}
            <AuthModal isOpen={isAuthModalOpen} onClose={() => setAuthModalOpen(false)} />
          </div>
        )}
    </div>
  );
}