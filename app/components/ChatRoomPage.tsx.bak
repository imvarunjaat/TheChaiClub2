'use client';

import { useState, useEffect, useRef } from 'react';
import data from '@emoji-mart/data';
import Picker from '@emoji-mart/react';
import { format } from 'date-fns';
import Image from 'next/image';
import { useChatRoom, ChatMessage, OnlineUser } from '../hooks/useChatRoom';
import { useAuth } from '../context/AuthContext';

interface ChatRoomPageProps {
  roomId: string;
  roomName: string;
  onBack: () => void;
}

export default function ChatRoomPage({ roomId, roomName, onBack }: ChatRoomPageProps) {
  const [newMessage, setNewMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Get authentication state
  const { user } = useAuth();
  
  // Use our custom hook for chat room data
  const { messages, onlineUsers, loading, sendMessage } = useChatRoom(roomId);
  
  // Common emojis
  const emojis = ['😊', '😂', '❤️', '👍', '🙏', '🎉', '😎', '🔥', '✨', '🤔'];

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Handle sending a new message
  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;
    
    setIsSending(true);
    
    try {
      // Send message using our hook function
      await sendMessage(newMessage.trim());
      
      // Clear the input
      setNewMessage('');
      setShowEmojiPicker(false);
    } catch (error) {
      console.error('Failed to send message:', error);
    } finally {
      setIsSending(false);
    }
  };
  
  const handleEmojiClick = (emoji: string) => {
    setNewMessage(prev => prev + emoji);
  };

  const formatTime = (dateString: string) => {
    return format(new Date(dateString), 'h:mm a');
  };

  // Format timestamp to show "just now" for recent messages
  const formatMessageTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diffInSeconds < 60) {
      return 'just now';
    } else {
      return formatTime(timestamp);
    }
  };

  return (
    <div className="flex flex-col h-full max-h-screen bg-[#fff5f2]/80 rounded-2xl sm:rounded-3xl shadow-xl overflow-hidden">
      {/* Header */}
      <div className="bg-white/70 backdrop-blur-sm p-4 flex items-center justify-between border-b border-[#f9c7c7]/30">
        <div className="flex items-center">
          <button 
            onClick={onBack}
            className="mr-3 p-2 hover:bg-[#f9c7c7]/20 rounded-full transition"
          >
            <svg className="w-5 h-5 text-[#593A27]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <div>
            <h2 className="text-lg font-medium text-[#593A27]">{roomName}</h2>
            <p className="text-xs text-[#b89e8f]">{onlineUsers.length} online</p>
          </div>
        </div>
        
        <div>
          <button className="p-2 hover:bg-[#f9c7c7]/20 rounded-full transition">
            <svg className="w-5 h-5 text-[#593A27]" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
            </svg>
          </button>
        </div>
      </div>
      
      {/* Chat container */}
      <div className="flex flex-col flex-grow h-full overflow-hidden">
        {/* Messages area */}
        <div className="flex-grow overflow-y-auto pb-4">
          {loading ? (
            // Loading skeleton
            <div className="flex flex-col gap-4 px-4 py-4">
              {Array(5).fill(0).map((_, i) => (
                <div key={i} className={`flex items-start mb-4 ${i % 2 === 0 ? 'justify-end' : ''}`}>
                  {i % 2 !== 0 && (
                    <div className="flex-shrink-0 mr-2">
                      <div className="w-8 h-8 rounded-full bg-gray-200 animate-pulse" />
                    </div>
                  )}
                  <div className={`flex flex-col ${i % 2 === 0 ? 'items-end' : ''}`}>
                    <div className="flex items-center mb-1">
                      <div className="h-3 w-16 bg-gray-200 animate-pulse rounded" />
                    </div>
                    <div className={`rounded-2xl px-4 py-2 w-40 h-10 ${i % 2 === 0 ? 'bg-[#f9c7c7]/50' : 'bg-white/40'} animate-pulse`} />
                  </div>
                  {i % 2 === 0 && (
                    <div className="flex-shrink-0 ml-2">
                      <div className="w-8 h-8 rounded-full bg-gray-200 animate-pulse" />
                    </div>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="px-4 py-4">
              {messages.map((msg) => {
                // Check if the message is from the current user
                const isCurrentUser = user?.id === msg.user_id;
                return (
                  <div
                    key={msg.id}
                    className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'} animate-fadeIn mb-4`}
                  >
                    <div className={`flex max-w-[80%] ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}>
                      <div className="flex-shrink-0 self-end">
                        <div className="relative">
                          <Image 
                            src={msg.user.avatar_url}
                            alt={msg.user.name}
                            width={36}
                            height={36}
                            className="rounded-full border-2 border-white shadow-sm"
                          />
                          {!isCurrentUser && (
                            <span className="absolute bottom-0 right-0 w-2 h-2 bg-green-400 rounded-full border border-white"></span>
                          )}
                        </div>
                      </div>
                      <div className={`mx-2 ${isCurrentUser ? 'items-end' : 'items-start'}`}>
                        <div className="flex items-center mb-1">
                          <span className={`text-xs text-[#b89e8f] ${isCurrentUser ? 'order-last ml-2' : 'order-first mr-2'}`}>
                            {formatMessageTime(msg.created_at)}
                          </span>
                          <span className="text-sm font-medium text-[#593A27]">
                            {isCurrentUser ? 'You' : msg.user.name}
                          </span>
                        </div>
                        <div 
                          className={`rounded-2xl py-3 px-4 shadow-sm ${isCurrentUser 
                            ? 'bg-gradient-to-br from-[#f9c7c7]/80 to-[#fbeee0] text-[#593A27] rounded-tr-none' 
                            : 'bg-white text-[#593A27] rounded-tl-none'}`}
                        >
                          <p className="text-sm leading-relaxed">{msg.content}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>
        
        {/* Emoji picker */}
        {showEmojiPicker && (
          <div className="px-4">
            <div className="bg-white rounded-2xl shadow-lg p-2 mb-2">
              <div className="flex flex-wrap gap-2 justify-center">
                {emojis.map((emoji, index) => (
                  <button
                    key={index}
                    onClick={() => handleEmojiClick(emoji)}
                    className="text-xl hover:bg-gray-100 p-1 rounded transition"
                  >
                    {emoji}
                  </button>
                ))}
                <button 
                  className="text-xs text-gray-500 hover:bg-gray-100 p-1 rounded transition"
                  onClick={() => setShowEmojiPicker(false)}
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
        
        {/* Message input area */}
        <div className="bg-white/80 p-3 border-t border-[#f9c7c7]/30">
          <div className="flex items-center rounded-full bg-white shadow-inner overflow-hidden pl-4 pr-2 py-1">
            <button 
              onClick={() => setShowEmojiPicker(!showEmojiPicker)}
              className="flex-shrink-0 text-[#b89e8f] hover:text-[#593A27] mr-2"
            >
              <svg className="w-5 h-5" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10zm0-2a8 8 0 100-16 8 8 0 000 16zm-5-7h2a3 3 0 106 0h2a5 5 0 01-10 0z"/>
              </svg>
            </button>
            
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Type a message..."
              className="flex-grow text-sm text-[#593A27] focus:outline-none bg-transparent"
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
              disabled={!user} // Disable if not authenticated
            />
            
            <button
              onClick={handleSendMessage}
              disabled={isSending || !newMessage.trim() || !user}
              className={`ml-2 flex-shrink-0 bg-gradient-to-r from-[#f9c7c7] to-[#fbeee0] text-[#593A27] rounded-full p-2 transition ${(isSending || !newMessage.trim() || !user) ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-md'}`}
            >
              {isSending ? (
                <svg className="w-5 h-5 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                </svg>
              )}
            </button>
          </div>
          
          {!user && (
            <div className="mt-2 text-xs text-center text-[#e85a71]">
              Please login to send messages
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
